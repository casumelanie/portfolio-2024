---
const { title } = Astro.props;
const links = [
	{
		text: "accueil",
		url: "/"
	},
	{
		text: "projets",
		url: "/projets"
	},
	{
		text: "Ã  propos",
		url: "/a-propos"
	},
	{
		text: "contact",
		url: "/#contact"
	}
];
---

<>
	<div
		class="modal-menu fixed bottom-0 right-0 top-0 z-50 flex h-dvh w-full flex-col items-start justify-between bg-firefly-500 pb-24 pl-6 pr-2 pt-2 lg:bottom-6 lg:right-6 lg:top-6 lg:w-1/2 lg:flex-col-reverse lg:rounded-3xl lg:pb-5 lg:pl-12 lg:pr-5 lg:pt-48 2xl:w-1/3"
	>
		<div
			class="close-modal group flex h-11 w-24 items-center justify-center self-end rounded-full bg-fantasy-50 lg:h-[75px] lg:w-[75px] lg:cursor-pointer lg:transition-colors lg:hover:bg-firefly-900"
		>
			<span class="text-xl text-firefly-900 lg:group-hover:text-fantasy-50">fermer</span>
		</div>
		<ul class="space-y-3 lg:space-y-6">
			{
				links.map((link) => (
					<li>
						<a
							class="link w-fit text-3xl uppercase leading-normal text-fantasy-50 transition-colors hover:text-firefly-900 lg:text-6xl"
							href={link.url}
						>
							{link.text}
						</a>
					</li>
				))
			}
		</ul>
	</div>
	<div class="fixed-animated-menu fixed z-40 flex w-full justify-end px-3 py-2 lg:bottom-5 lg:right-5 lg:h-fit lg:w-fit lg:p-0">
		<div
			class="circle z-40 flex h-11 w-24 items-center justify-center rounded-full bg-firefly-900 lg:absolute lg:bottom-1/2 lg:right-1/2 lg:h-[75px] lg:w-[75px] lg:translate-x-1/2 lg:translate-y-1/2 lg:cursor-pointer lg:transition-colors lg:hover:bg-firefly-500"
		>
			<span class="text-xl text-fantasy-50">menu</span>
		</div>
		<svg class="hidden lg:block" viewBox="0 0 100 100" width="125" height="125">
			<defs>
				<path id="circle" d="
        M 50, 50
        m -37, 0
        a 37,37 0 1,1 74,0
        a 37,37 0 1,1 -74,0"></path>
			</defs>
			<text>
				<textPath class="text-firefly-900 lg:cursor-default" xlink:href="#circle">
					{title}
				</textPath>
			</text>
		</svg>
	</div>
</>

<style is:global lang="postcss">
  /* MENU BOUTON */
@media screen and (min-width: 1024px) {
  svg {
    fill: currentColor;
    height: auto;
    max-width: 125px;
    transform-origin: center;
    width: auto;
  }

  .fixed-animated-menu textPath {
    font-size: 14px !important;
    text-transform: lowercase;
  }

  .fixed-animated-menu svg {
    animation: infiniteRotate 20s linear infinite;
  }

  @keyframes infiniteRotate {
    to {
      transform: rotate(360deg);
    }
  }

  .fixed-animated-menu .circle:hover ~ svg,
  .modal-menu.active ~ .fixed-animated-menu svg {
    animation-play-state: paused;
  }
}

/* MODALE */
.modal-menu {
  transform: translateX(calc(100% + 2rem));
  transition: transform 1.25s;
}

.modal-menu.active {
  transform: translateX(0);
}

@media screen and (min-width: 1024px) {
  .modal-menu {
    height: calc(100vh - 3rem);
  }
}
</style>

<script>
	const btnMenu = document.querySelector(".fixed-animated-menu .circle");
	const modal = document.querySelector(".modal-menu");
	const btnClose = document.querySelector(".close-modal");
	btnMenu.addEventListener("click", () => {
		modal.classList.add("active");
	});

	btnClose.addEventListener("click", () => {
		modal.classList.remove("active");
	});
</script>
